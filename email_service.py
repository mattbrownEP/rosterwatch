import smtplib
import os
import logging
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import List, Dict

logger = logging.getLogger(__name__)

class EmailService:
    def __init__(self):
        self.smtp_server = os.environ.get('SMTP_SERVER', 'smtp.gmail.com')
        self.smtp_port = int(os.environ.get('SMTP_PORT', '587'))
        self.smtp_username = os.environ.get('SMTP_USERNAME', '')
        self.smtp_password = os.environ.get('SMTP_PASSWORD', '')
        self.from_email = os.environ.get('FROM_EMAIL', self.smtp_username)
    
    def send_change_alert(self, to_email: str, site_name: str, changes: List[Dict], site_url: str) -> bool:
        """Send email alert for staff directory changes."""
        try:
            if not self.smtp_username or not self.smtp_password:
                logger.warning("SMTP credentials not configured, skipping email")
                return False
            
            subject = f"Staff Directory Changes Detected - {site_name}"
            body = self._create_email_body(site_name, changes, site_url)
            
            msg = MIMEMultipart()
            msg['From'] = self.from_email
            msg['To'] = to_email
            msg['Subject'] = subject
            
            msg.attach(MIMEText(body, 'html'))
            
            # Connect to server and send email
            server = smtplib.SMTP(self.smtp_server, self.smtp_port)
            server.starttls()
            server.login(self.smtp_username, self.smtp_password)
            
            text = msg.as_string()
            server.sendmail(self.from_email, to_email, text)
            server.quit()
            
            logger.info(f"Change alert email sent to {to_email} for {site_name}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to send email to {to_email}: {str(e)}")
            return False
    
    def _create_email_body(self, site_name: str, changes: List[Dict], site_url: str) -> str:
        """Create HTML email body for change notifications."""
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
                .header {{ background-color: #f8f9fa; padding: 20px; border-radius: 5px; margin-bottom: 20px; }}
                .change {{ margin: 15px 0; padding: 15px; border-radius: 5px; }}
                .added {{ background-color: #d4edda; border-left: 4px solid #28a745; }}
                .removed {{ background-color: #f8d7da; border-left: 4px solid #dc3545; }}
                .modified {{ background-color: #fff3cd; border-left: 4px solid #ffc107; }}
                .footer {{ margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; font-size: 12px; color: #666; }}
                a {{ color: #007bff; text-decoration: none; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h2>Staff Directory Changes Detected</h2>
                <p><strong>Site:</strong> {site_name}</p>
                <p><strong>URL:</strong> <a href="{site_url}" target="_blank">{site_url}</a></p>
                <p><strong>Changes Found:</strong> {len(changes)}</p>
            </div>
            
            <h3>Change Details:</h3>
        """
        
        for change in changes:
            change_type = change['change_type']
            staff_name = change.get('staff_name', 'Unknown')
            description = change.get('change_description', '')
            
            html += f"""
            <div class="change {change_type}">
                <h4>{change_type.title()}: {staff_name}</h4>
                <p>{description}</p>
            </div>
            """
        
        html += f"""
            <div class="footer">
                <p>This alert was generated by the Staff Directory Monitor.</p>
                <p>You are receiving this email because you are monitoring the staff directory for {site_name}.</p>
            </div>
        </body>
        </html>
        """
        
        return html
    
    def test_email_configuration(self) -> bool:
        """Test if email configuration is working."""
        try:
            if not self.smtp_username or not self.smtp_password:
                return False
            
            server = smtplib.SMTP(self.smtp_server, self.smtp_port)
            server.starttls()
            server.login(self.smtp_username, self.smtp_password)
            server.quit()
            
            return True
        except Exception as e:
            logger.error(f"Email configuration test failed: {str(e)}")
            return False
